continue
c
continue
Amy.to_snake_case(c.to_s)
Object.constants.include? c
c.inspect
c
continue
c
continue
app.constants
continue
amy::Controller.constants
amy.constants
amy = Object.const_get('Amy')
app.constants
app
continue
Object.const_get('BestQuotes::HomeController')
Object.const_get(app).const_get('HomeController')
Object.const_get(app)
Object.constants.sort
Object.constants
continue
app
continue
self.class.app_name
self
BestQuotes::Application.app_name
Amy::Application.new.app_name
Amy::Application.app_name
self.app_name
app_name
continue
Amy::Application.public_methods
Amy::Application.app_name
app_name
continue
Amy::Application.new.public_methods
Amy::Application.new
Amy::Application.new.app_name
Amy::Applicatio.new.app_name
Amy::Application::app_name
Amy::Application.app_name
Amy::Application.constants
Application.constants
app_name
continue
Object.constants.sort
Object.constants
continue
klass.new(env).respond_to?("a_quotes")
klass.new(env).respond_to?("a_quote")
klass.new.respond_to?("a_quote")
action
klass
klass.respond_to?("a_quote".to_sym)
klass.respond_to?("a_quote")
klass.respond_to?(action.to_sym)
klass.respond_to?(action)
continue
klass
continue
klass
continue
dispatch(env)
*dispatch(env)
body
status
continue
root_file.respond_to?(:call)
root_file.call
root_file
continue
response_body
headers
status
continue
Amy::Application.constants
continue
Amy::Author
Amy.constants
Amy.contants
continue
Amy.constants
Amy::Application
Amy::Author
continue
Author
Amy::Author
continue
Amy::Author
continue
Amy::Author
continue
Amy::BASE_DIR
Amy.constants
continue
Amy.constants
Amy
continue
Amy::Application
continue
Amy::Model
Amy::BASE_DIR
Amy.BASE_DIR
Amy.constants
Amy.children
Amy.class
Amy
continue
Amy::Application
continue
BestQuotes::Application
continue
Application
Amy::Application
Amy
continue
Amy::Application
Amy
continue
Amy::Application
Amy::Applicaion
continue
Amy::Application
Application
include Amy
Amy::Application
Amy.inspect
Amy.public_methods
Amy.class
Amy
